/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 * Richiamo origine progetto.
 */
package climatemonitoring;
/**
 * Importazione del separatore dalla classe main 'ClimateMonitor'
 */
import static climatemonitoring.ClimateMonitor.sep;
/**
 * Richiamo Librerie.
 */
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 * @author 753546 Badrous Giorgio William
 * @author 753540 Casati Simone
 * @author 754772 Biavaschi Raffaele
 * @author 755531 Bonacina Davide
 */

public class Parametri extends JDialog {
    /**
     * Dichirazione variabili per controllo di eventuali errori di conversione
     */
    static boolean ck = true; 
    public String IDAREA = null;
    /**
     * Variabile oggetto di tipo 'Home'
     */
    Home reg;
    /**
     * Costruttore <strong>base</strong> (senza parametri)
     */
    public Parametri(){}
    /**
     * Costruttore <strong>parametrizzato</strong>
     * @param reg oggetto, di tipo 'Home'
     * @param ck boleean, del costuttore per eventuali errori
     */
    public Parametri(Home reg, boolean ck) {
        /**
         * 'Super' per puntare alla classe genitore, da cui eredito metodi e parametri
         */
        super(reg,ck);
        /**
         * 'This' per puntare al riferimento di una oggetto presente nella classe corrente
         */
        this.reg = reg;
        /**
         * 'This' per puntare al riferimento di una metodo presente nella classe corrente (setto titolo)
         */
        this.setTitle("Inserisci Parametri");
        /**
         * Metodo base di Netbeans (Swing designer, parte grafica) per inizializzare il componente
         */
        initComponents();
        /**
         * Metodo per recuperare la dimensione del display, per creare una finestra coerente
         */
        Dimension dim = getToolkit().getScreenSize();
        /**
         * Metodo per posizione la finestra
         */
        this.setLocation(dim.width / 2 - this.getWidth() / 2, dim.height / 2 - this.getHeight() / 2);
        /**
         * Metodo per rendere visibile la finestra
         */ 
        setVisible(true);
        /**
         * Metodo per bloccare la possibilità di ridimensionare la finestra
         */
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ventoField = new javax.swing.JTextField();
        umiditaField = new javax.swing.JTextField();
        pressioneField = new javax.swing.JTextField();
        centriDrop = new javax.swing.JComboBox<>();
        areaDrop = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        noteArea = new javax.swing.JTextArea();
        inserisci = new javax.swing.JButton();
        precipitazioniField = new javax.swing.JTextField();
        altField = new javax.swing.JTextField();
        massField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        temperaturaField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 102));
        jLabel1.setText("Aggiungi Parametri");

        jLabel2.setText("Area di Interesse");

        jLabel3.setText("Centro Monitoraggio");

        jLabel4.setText("Vento");

        jLabel5.setText("Umidità");

        centriDrop.addItem("");
        boolean ck = false;
        boolean ck2 = false;
        String line = null;
        String IDArea = null;
        String line2 = null;
        FileReader in = null;
        FileReader in2 = null;
        try {
            in = new FileReader("data"+sep+"OperatoriRegistrati.dati");
            BufferedReader br = new BufferedReader(in);
            in2 = new FileReader("data"+sep+"CentroMonitoraggio.dati");
            BufferedReader br2 = new BufferedReader(in2);
            String splitBy = "; ";
            String split = ", ";
            while ((line = br.readLine()) !=null) {
                if(ck){
                    String[] operatore = line.split(splitBy);
                    if(operatore[2].equals(reg.codFisc)){
                        //da qui recupero nome aree per aggiungerle
                        String[] IdArea = operatore[6].split(split);
                        while ((line2 = br2.readLine()) !=null) {
                            if(ck){
                                String[] area = line2.split(splitBy);
                                IDArea = area[3];
                                if(IdArea.length==1){
                                    if(IDArea.equals(IdArea[0])){
                                        centriDrop.addItem(area[0]);
                                    }
                                }else{
                                    for(int i=0; i<IdArea.length;i++){
                                        if(IDArea.equals(IdArea[i])){
                                            centriDrop.addItem(area[0]);
                                        }
                                    }
                                }
                            }ck=true;
                        }
                    }

                }ck=true;
            }
        }catch (IOException e) {
            System.out.print(e);
        }
        centriDrop.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                centriDropItemStateChanged(evt);
            }
        });

        areaDrop.setEnabled(false);
        String NomeCentro = (String)centriDrop.getSelectedItem();
        ck=false;
        line = null;
        in = null;
        String split = ", ";
        try {
            in = new FileReader("data"+sep+"CentroMonitoraggio.dati");
            BufferedReader br = new BufferedReader(in);
            String splitBy = "; ";
            while ((line = br.readLine()) !=null) {
                if(ck){
                    String[] centro = line.split(splitBy);
                    String nomeCentro = centro[0];
                    //System.out.println("Nome: "+nomeCentro);
                    if(NomeCentro.equals(nomeCentro)){
                        String aree[] = centro[2].split(split);
                        for(String s : aree){
                            areaDrop.addItem(s);
                        }
                    }
                }ck=true;
            }
        }catch(Exception e){}

        jLabel9.setText("Pressione");

        jLabel10.setText("Temperatura");

        jLabel11.setText("Precipitazioni");

        jLabel12.setText("Altitudine Ghiacciai");

        jLabel13.setText("Massa Ghiacciai");

        jLabel14.setText("Note");

        noteArea.setColumns(20);
        noteArea.setRows(5);
        jScrollPane1.setViewportView(noteArea);

        inserisci.setText("Inserisci");
        inserisci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserisciActionPerformed(evt);
            }
        });

        jLabel6.setText("km/h");

        jLabel7.setText("%");

        jLabel8.setText("hPa");

        jLabel15.setText("°C");

        jLabel16.setText("mm");

        jLabel17.setText("m");

        jLabel18.setText("kg");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel14)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(inserisci))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(centriDrop, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(altField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(precipitazioniField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pressioneField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(umiditaField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ventoField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(areaDrop, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(massField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(temperaturaField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))))
                .addGap(28, 35, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(centriDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(areaDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ventoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(umiditaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pressioneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel15)
                    .addComponent(temperaturaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(precipitazioniField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(altField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(massField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(inserisci)
                        .addGap(58, 58, 58))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Metodo che al click del bottone esegue l'inserimento dei parametri della località scelta (richiama metodi 'calcoli degli score')
     * verifica se mancano i parametri richiesti
     * @param evt click del bottone
     * @throws Exception eccezione generica
     */
    private void inserisciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserisciActionPerformed
        /**
         * Variabili impostate su valore iniziale
         */
        boolean check=true; ArrayList<String> errore=new ArrayList<String>();int c=0;
        /**
         * Controlla se centriDrop uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(centriDrop.getSelectedItem()==""){check=false;errore.add("Centro Monitoraggio");c++;}
        /**
         * Controlla se areaDrop uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(areaDrop.getSelectedItem()==""){check=false;errore.add("Area Interesse");c++;}
        /**
         * Controlla se ventoField uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(ventoField.getText().equals("")){check=false;errore.add("Vento");c++;}
        /**
         * Controlla se umiditaField uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(umiditaField.getText().equals("")){check=false;errore.add("Umidità");c++;}
        /**
         * Controlla se pressioneField uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(pressioneField.getText().equals("")){check=false;errore.add("Pressione");c++;}
        /**
         * Controlla se temperaturaField uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(temperaturaField.getText().equals("")){check=false;errore.add("Temperatura");c++;}
        /**
         * Controlla se precipitazioniField uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(precipitazioniField.getText().equals("")){check=false;errore.add("Precipitazioni");c++;}
        /**
         * Controlla se altField uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(altField.getText().equals("")){check=false;errore.add("Altitudine Ghiacciai");c++;}
        /**
         * Controlla se massField uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(massField.getText().equals("")){check=false;errore.add("Massa Ghiacciai");c++;}
        /**
         * Controlla se check diverso da vero, se uguale a vero prosegue 
         * mostrando l'errore se falso invece prosegue con l'inserimento
         */
        if(!check){
            /**
             * Variabili stringa f, vuota
             */
            String f = "";
            for(String s : errore){ f+="\n-"+s ;}
            /**
             * Generazione finestra di errore con specifica dell'errore (parametro mancante)
             */
            JOptionPane.showMessageDialog(null, "Non hai inserito: " +f,"Errore!", JOptionPane.ERROR_MESSAGE);
        }else{
            /**
             * Esegue il metodo d'inserimento, controllato per evitare innalzamento di eccezioni
             * trasformazione dei parametri inseriti in punteggi
             * recupero dell ID da variabile IDCentro
             */
            String NomeCentro = (String) centriDrop.getSelectedItem();
            /**
             * Imposto la linea e il lettore su valore 'nullo' iniziale
             */
            String line = null;
            FileReader in = null;
            /**
             * Dichiarazione separatore da usare in fase di ricerca, coincide con il separatore usato nel file 'CentroMonitoraggio.dati'
             */
            String splitBy = "; ";
            /**
             * Dichiarazione IDCentro su valore base
             */
            int IDCentro=0;
            try {
                /**
                 * Imposto il lettore di riga con l'apposito separatore (dichiarato inizialmente)
                 * Leggo dal file 'CentriMonitoraggio.dati'
                 */
                in = new FileReader("data"+sep+"CentroMonitoraggio.dati");
                /**
                 * Buffer per la lettura
                 */
                BufferedReader br = new BufferedReader(in);
                /**
                 * Ciclo di lettetura del file per ricerca corrispondenza valore, conclusione a riga 'nulla'
                 */
                while ((line = br.readLine()) !=null) {
                    String[] centro = line.split(splitBy);
                    /**
                     * Verifica corrispondenza ID del centro inserito con dati estratti dal file 'CentroMonitoraggio.dati'
                     */
                    if(centro[0].equals(NomeCentro)){
                        /**
                         * Assegnazione NomeCentro da valore di file
                         */
                        IDCentro = Integer.parseInt(centro[3]);
                        break;
                    }
                }
            }catch(Exception e){
                /**
                 * Scrittura su riga di comando del eccezione, per debug
                 */
                System.out.println(e);
            }
            
            /**
             * Metodo per il recupero del valore di ID presente in variabile GeoID
             */
            String NomeArea = (String) areaDrop.getSelectedItem();
            /**
             * Imposto la linea e il lettore su valore 'nullo' iniziale
             */
            line = null;
            in = null;
            splitBy = ";";
            long GeoID=0;
            try {
                /**
                 * Imposto il lettore di riga con l'apposito separatore (dichiarato inizialmente)
                 * Leggo dal file 'CoordinateMonitoraggio.dati'
                */
                in = new FileReader("data"+sep+"CoordinateMonitoraggio.dati");
                /**
                 * Buffer per la lettura
                 */
                BufferedReader br = new BufferedReader(in);
                /**
                 * Ciclo di lettetura del file per ricerca corrispondenza valore, conclusione a riga 'nulla'
                 */
                while ((line = br.readLine()) !=null) {
                    String[] aree = line.split(splitBy);
                    /**
                     * Verifica corrispondenza nome del centro inserito con dati estratti dal file 'CoordinateMonitoraggio.dati'
                     */
                    if(aree[1].equals(NomeArea)){
                        /**
                         * Assegnazione GeoID da valore di file
                         */
                        GeoID = Long.parseLong(aree[0]);
                    }
                }
            }catch(Exception e){} 
           
            try{
                /**
                 * Estrazione valore vento da box d'inserimento
                 */
                int vento = Integer.parseInt(ventoField.getText());
                /**
                 * Estrazione valore umidita da box d'inserimento
                 */
                int umidita = Integer.parseInt(umiditaField.getText());
                /**
                 * Estrazione valore pressione da box d'inserimento
                 */
                int pressione = Integer.parseInt(pressioneField.getText());
                /**
                 * Estrazione valore temperatura da box d'inserimento
                 */
                int temperatura = Integer.parseInt(temperaturaField.getText());
                /**
                 * Estrazione valore precipitazioni da box d'inserimento
                 */
                int precipitazioni = Integer.parseInt(precipitazioniField.getText());
                /**
                 * Estrazione valore altitudine da box d'inserimento
                 */
                int alt = Integer.parseInt(altField.getText());
                /**
                 * Estrazione valore massa da box d'inserimento
                 */
                int mass = Integer.parseInt(massField.getText());
                
                /**
                 * Richiamo delle funzioni per il calcolo dei punteggi
                 */
                int scoreVento = calcolaScoreVento(vento);
                int scoreUmidita = calcolaScoreUmidita(umidita);
                int scorePressione = calcolaScorePressione(pressione);
                int scoreTemperatura = calcolaScoreTemperatura(temperatura);
                int scorePrecipitazioni = calcolaScorePrecipitazioni(precipitazioni);
                int scoreAlt = calcolaScoreAltitudineGhiacciai(alt);
                int scoreMass = calcolaScoreMassaGhiacciai(mass);         
                String note = noteArea.getText();
                /**
                 * Metodo scrittura dei punteggi calcolati su File
                 * ck per prevenire la scrittura su file di dati errati
                 */
                if(ck){     
                    try{
                        /**
                         * Dichiarazione separatore da usare in fase di inserimento
                         */
                        String sip="; ";
                        /**
                         * Imposto lo scrittore di riga con l'apposito separatore (dichiarato inizialmente)
                         * Scrivo sul file 'ParametriClimatici.dati'
                         */
                        FileWriter fw = new FileWriter("data"+sep+"ParametriClimatici.dati",true);
                        /**
                         * Scrivo ad uno ad uno i parametri inseriti nel form dall'utente, nel file 'ParametriClimatici.dati'
                         * i parametri che sono stati precedentemente trasformati in 'punteggio'
                         */
                        fw.write("\n");
                        fw.append(GeoID+sip);
                        fw.append(IDCentro+sip);
                        fw.append(scoreVento+sip);
                        fw.append(scoreUmidita+sip);
                        fw.append(scorePressione+sip);
                        fw.append(scoreTemperatura+sip);
                        fw.append(scorePrecipitazioni+sip);
                        fw.append(scoreAlt+sip);
                        fw.append(scoreMass+sip);
                        if(!noteArea.getText().equals("")){
                            fw.append(note);
                        }else{
                            fw.append("Nessun commento disponibile!");
                        }
                        fw.flush();
                        fw.close();
                        /**
                         * Generazione finestra di dialogo con conferma di inserimento
                         */
                        JOptionPane.showMessageDialog(null, "Inserimento effettuato con successo!","Successo!", JOptionPane.INFORMATION_MESSAGE);
                        /**
                         * Chiusura finestra di dialogo
                         */
                        this.dispose();
                    }catch(Exception e){}
                }
            }catch(NumberFormatException e){
                /**
                 * Generazione finestra di errore con specifica dell'errore (parametri non numerici)
                 */
                JOptionPane.showMessageDialog(null, "Devi inserire un numero!","Errore!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_inserisciActionPerformed
    

    /**
     * Metodo per il calcolo del punteggio del vento
     * @param vento intero, valore del vento
     * @return valore score_vento
     * Eccezioni non gestite
     */
    public static int calcolaScoreVento(int vento) {
        int score_vento=0;
        if (vento >= 1 && vento <= 10) {
            score_vento=1;
        } else if (vento <= 20) {
            score_vento=2;
        } else if (vento <= 30) {
            score_vento=3;
        } else if (vento <= 60) {
            score_vento=4;
        } else if (vento <= 120) {
            score_vento=5;
        } else {
            JOptionPane.showMessageDialog(null, "Valore inserito per il vento non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
            ck=false;
        }
        return score_vento;
    }
    /**
     * Metodo per il calcolo del punteggio dell'umidita
     * @param umidita intero, valore dell'umidita
     * @return valore score_umidita
     * Eccezioni non gestite
     */
    public static int calcolaScoreUmidita(int umidita) {
        int score_umidita=0;
        if (umidita >= 0 && umidita <= 20) {
            score_umidita=1;
        } else if (umidita <= 40) {
            score_umidita=2;
        } else if (umidita <= 60) {
            score_umidita=3;
        } else if (umidita <= 80) {
            score_umidita=4;
        } else if (umidita <= 100) {
            score_umidita=5;
        } else {
            JOptionPane.showMessageDialog(null, "Valore inserito per l'umidità non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
            ck=false;
        }
        return score_umidita;
    }
    /**
     * Metodo per il calcolo del punteggio della pressione
     * @param pressione intero, valore della pressione
     * @return valore score_pressione
     * Eccezioni non gestite
     */
    public static int calcolaScorePressione(int pressione) {
        int score_pressione=0;
        if (pressione >= 970 && pressione <= 1000) {
            score_pressione=1;
        } else if (pressione <= 1015) {
            score_pressione=2;
        } else if (pressione <= 1023) {
            score_pressione=3;
        } else if (pressione <= 1034) {
            score_pressione=4;
        } else if (pressione <= 1047) {
            score_pressione=5;
        } else {
            JOptionPane.showMessageDialog(null, "Valore inserito per la pressione non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
            ck=false;
        }
        return score_pressione;
    }
    /**
     * Metodo per il calcolo del punteggio della temperatura
     * @param temperatura intero, valore della temperatura
     * @return valore score_temperatura
     * Eccezioni non gestite
     */
    public static int calcolaScoreTemperatura(int temperatura) {
        int score_temperatura=0;
        if (temperatura >= -30 && temperatura <= -15) {
            score_temperatura=1;
        } else if (temperatura <= 0) {
            score_temperatura=2;
        } else if (temperatura <= 15) {
            score_temperatura=3;
        } else if (temperatura <= 30) {
            score_temperatura=4;
        } else if (temperatura <= 45) {
            score_temperatura=5;
        } else {
           JOptionPane.showMessageDialog(null, "Valore inserito per la temperatura non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
           ck=false;
        }
        return score_temperatura;
    }
    /**
     * Metodo per il calcolo del punteggio delle precipitazioni
     * @param precipitazioni intero, valore delle precipitazioni
     * @return valore score_precipitazioni
     * Eccezioni non gestite
     */
    public static int calcolaScorePrecipitazioni(int precipitazioni) {
        int score_precipitazioni=0;
        if (precipitazioni >= 1 && precipitazioni <= 2) {
            score_precipitazioni=1;
        } else if (precipitazioni <= 4) {
            score_precipitazioni=2;
        } else if (precipitazioni <= 6) {
            score_precipitazioni=3;
        } else if (precipitazioni <= 8) {
            score_precipitazioni=4;
        } else if (precipitazioni <= 12) {
            score_precipitazioni=5;
        } else {
            JOptionPane.showMessageDialog(null, "Valore inserito per le precipitazioni non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
            ck=false;
        }
        return score_precipitazioni;
    }
    /**
     * Metodo per il calcolo del punteggio dell'altitudine
     * @param altitudineGhiacciai intero, valore dell'altitudine
     * @return valore score_altitudine_ghiacciai
     * Eccezioni non gestite
     */
    public static int calcolaScoreAltitudineGhiacciai(int altitudineGhiacciai) {
        int score_altitudine_ghiacciai=0;
        if (altitudineGhiacciai >= 0 && altitudineGhiacciai <= 200) {
            score_altitudine_ghiacciai=1;
        } else if (altitudineGhiacciai <= 400) {
            score_altitudine_ghiacciai=2;
        } else if (altitudineGhiacciai <= 600) {
            score_altitudine_ghiacciai=3;
        } else if (altitudineGhiacciai <= 800) {
            score_altitudine_ghiacciai=4;
        } else if (altitudineGhiacciai <= 1000) {
            score_altitudine_ghiacciai=5;
        } else {
            JOptionPane.showMessageDialog(null, "Valore inserito per l'altidudine dei ghiacciai non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
            ck=false;
        }
        return score_altitudine_ghiacciai;
    }
    /**
     * Metodo per il calcolo del punteggio della massa
     * @param massaGhiacciai intero, valore della massa
     * @return valore score_massa_ghiacciai
     * Eccezioni non gestite
     */
    public static int calcolaScoreMassaGhiacciai(int massaGhiacciai) {
        int score_massa_ghiacciai=0;
        if (massaGhiacciai >= 0 && massaGhiacciai <= 200) {
            score_massa_ghiacciai=1;
        } else if (massaGhiacciai <= 400) {
            score_massa_ghiacciai=2;
        } else if (massaGhiacciai <= 600) {
            score_massa_ghiacciai=3;
        } else if (massaGhiacciai <= 800) {
            score_massa_ghiacciai=4;
        } else if (massaGhiacciai <= 1000) {
            score_massa_ghiacciai=5;
        } else {
           JOptionPane.showMessageDialog(null, "Valore inserito per la massa dei ghiacciai non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
           ck=false;
        }
        return score_massa_ghiacciai;
    }
    
    
    
    
    /**
     * Metodo per assegnare al DropDown i centri di monitoraggio assegnati all'utente corrente
     * @param evt click del dropdown
     * @throws Exception eccezione generica
    */
    private void centriDropItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_centriDropItemStateChanged
        /**
         * Verifica elementi DropDown = ' ' (vuoto)
         */
        if(!centriDrop.getSelectedItem().equals("")){
            /**
             * Rimozione elementi DropDown
             */
            areaDrop.removeAllItems();
            /**
             * Attivazione DropDown
             */
            areaDrop.setEnabled(true);
            /**
             * Inserimento valori estratti da DropDown
             */
            String NomeCentro = (String)centriDrop.getSelectedItem();
            boolean ck = false;
            /**
             * Imposto la linea e il lettore su valore 'nullo' iniziale
             */
            String line = null;
            FileReader in = null;
            /**
             * Dichiarazione separatore da usare in fase di login, coincide con il separatore usato nel file 'CentroMonitoraggio.dati'
             */
            String split = ", ";
            try {
                /**
                 * Imposto il lettore di riga con l'apposito separatore (dichiarato inizialmente)
                 * Leggo dal file 'CentroMonitoraggio.dati'
                 */
                in = new FileReader("data"+sep+"CentroMonitoraggio.dati");
                /**
                 * Buffer per la lettura
                 */
                BufferedReader br = new BufferedReader(in);
                String splitBy = "; ";
                    /**
                     * Ciclo di lettetura del file per ricerca corrispondenza valore, conclusione a riga 'nulla'
                     */
                    while ((line = br.readLine()) !=null) {
                        if(ck){
                            String[] centro = line.split(splitBy);
                            String nomeCentro = centro[0];
                            //System.out.println("Nome: "+nomeCentro);
                            /**
                             * Verifica corrispondenza valore inserito con dati estratti dal file 'CentroMonitoraggio.dati'
                             */
                            if(NomeCentro.equals(nomeCentro)){
                                String aree[] = centro[2].split(split);
                                for(String s : aree){
                                    /**
                                     * Inserimento valore estratto dal file 'CentroMonitoraggio.dati' nella DropDown
                                     */
                                    areaDrop.addItem(s);
                                }   
                            }
                        }ck=true;
                    }
            }catch(Exception e){}       
        }else{areaDrop.removeAllItems();areaDrop.setEnabled(false);}
    }//GEN-LAST:event_centriDropItemStateChanged
     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registrazione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registrazione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registrazione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registrazione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /**
         * Creazione e visualizzazione del form di inserimento (per inserimento valori) 
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                /**
                 * Metodo per rendere visibile la finestra d'inserimento
                 */
                new Registrazione().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField altField;
    private javax.swing.JComboBox<String> areaDrop;
    private javax.swing.JComboBox<String> centriDrop;
    private javax.swing.JButton inserisci;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField massField;
    private javax.swing.JTextArea noteArea;
    private javax.swing.JTextField precipitazioniField;
    private javax.swing.JTextField pressioneField;
    private javax.swing.JTextField temperaturaField;
    private javax.swing.JTextField umiditaField;
    private javax.swing.JTextField ventoField;
    // End of variables declaration//GEN-END:variables
}
