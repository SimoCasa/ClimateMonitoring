/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
/**
 * Richiamo origine progetto.
 */
package climatemonitoring;
/**
 * Importazione del separatore dalla classe main 'ClimateMonitor'
 */
import static climatemonitoring.ClimateMonitor.sep;
/**
 * Richiamo Librerie.
 */
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 * @author 753546 Badrous Giorgio William
 * @author 753540 Casati Simone
 * @author 754772 Biavaschi Raffaele
 * @author 755531 Bonacina Davide
 */
public class AreaParametri extends javax.swing.JDialog {
    /**
      * Creo oggetto di nome 'hh' di tipo 'Home' 
      * Creo una finistra speculare alla Home, in versione 'Operatore' con privilegi e funzioni aggiuntive.
      */
    private static final String DB_URL = "jdbc:postgresql://localhost:5432/ClimateMonitoring";
    private static final String DB_USER = "postgres";
    private static final String DB_PASSWORD = "password";
    /**
     * Variabile oggetto di tipo 'Home'
     */
    static Home hh;
    /**
     * Variabile che contiene il 'GeoNameID'
     */
    static long geo;
    /**
     * Variabile per controllare se sono presenti parametri climatici nel file
     */
    static boolean ck=false;
    /**
     * Costruttore <strong>base</strong> (senza parametri)
     */
    public AreaParametri(){}
    /**
     * Costruttore <strong>parametrizzato</strong>
     * @param hh oggetto, di tipo 'Home'
     * @param cs boleean, del costuttore
     * @param geo long, indica il GeoNameID
    */
    public AreaParametri(Home hh, boolean cs, long geo) {
        /**
         * 'Super' per puntare alla classe genitore, da cui eredito metodi e parametri
         */
        super(hh, cs);
        /**
         * 'This' per puntare al riferimento di una oggetto presente nella classe corrente
         */
        this.hh = hh;
        this.geo=geo;
        /**
         * 'This' per puntare al riferimento di una metodo presente nella classe corrente (setto titolo)
         */
        this.setTitle("Accedi");
        /**
         * Metodo base di Netbeans (Swing designer, parte grafica) per inizializzare il componente
         */
        initComponents();
        /**
         * Richiamo funzione per Visualizzare i Parametri Climatici
         */
        visualizzaParametriClimatici();
        /**
         * Controllo per vedere se sono presenti parametri climatici nel file
         */
        if(!ck){
            /**
             * Metodo per rendere non visibile la finestra ed pulirla
             */ 
            setVisible(false);dispose();
        }else{
            /**
             * Metodo per recuperare la dimensione del display, per creare una finestra coerente
             */
            Dimension dim = getToolkit().getScreenSize();
            /**
             * Metodo per posizione la finestra
             */
            this.setLocation(dim.width / 2 - this.getWidth() / 2, dim.height / 2 - this.getHeight() / 2);
            /**
             * Metodo per rendere visibile la finestra
             */ 
            setVisible(true);
            /**
             * Metodo per bloccare la possibilità di ridimensionare la finestra
             */
            setResizable(false);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        paramTable = new javax.swing.JTable();
        titolo = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        noteArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        paramTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vento", "Umidità", "Pressione", "Temperatura", "Precipitazioni", "Altitudine Ghiacciai", "Massa Ghiacciai"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableColumnModel columnModel = paramTable.getColumnModel();

        // Rendere le colonne non ridimensionabili
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            columnModel.getColumn(i).setResizable(false);
        }

        // Centrare orizzontalmente il testo nelle celle
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        for (int i = 0; i < paramTable.getColumnCount(); i++) {
            paramTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        // Bloccare lo spostamento delle colonne
        paramTable.getTableHeader().setReorderingAllowed(false);
        paramTable.setEnabled(false);
        jScrollPane1.setViewportView(paramTable);

        titolo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        titolo.setText("Parametri Climatici:");
        titolo.setText("Parametri Climatici ");

        cityLabel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        cityLabel.setForeground(new java.awt.Color(0, 153, 153));
        cityLabel.setText(hh.citta);

        noteArea.setEditable(false);
        noteArea.setColumns(20);
        noteArea.setRows(5);
        jScrollPane2.setViewportView(noteArea);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Note:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(titolo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cityLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titolo)
                    .addComponent(cityLabel))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AreaParametri.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AreaParametri.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AreaParametri.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AreaParametri.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /**
         * Creazione e visualizzazione della pagina dei Parametri Climatici
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                /**
                 * Metodo per rendere visibile la finestra di visualizzazione
                 */
                new AreaParametri().setVisible(true);
            }
        });
    }
    
    
    /**
     * Metodo per la ricerca dei parametri climatici dato il GeoID
     * Senza parametri perché recuperati dalle TextField
     * Gestita eccezione: IOException eccezione per mancanza file, directory errata
    */
    public void visualizzaParametriClimatici(){
        /*
         * Imposto la connessione e la query su valore 'nullo' iniziale
         */
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            /**
             * Connessione al database
             * Sostituire 'db_url', 'db_user', 'db_password' con le credenziali del proprio database
             */
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);

            /**
             * Query per recuperare i parametri climatici in base al GeoNameID
             */
            String query = "SELECT vento, umidita, pressione, temperatura, precipitazione, altitudineghiacciai, massaghiacciai, note FROM ParametriClimatici WHERE GeoNameID = ?";
            pstmt = conn.prepareStatement(query);
            pstmt.setLong(1, geo);

            /**
             * Esecuzione della query
             */
            rs = pstmt.executeQuery();

            /**
             * Se la query restituisce risultati, popola la tabella
             */
            if (rs.next()) {
                addRowTable(new String[]{
                    rs.getString("vento"),
                    rs.getString("umidita"),
                    rs.getString("pressione"),
                    rs.getString("temperatura"),
                    rs.getString("precipitazione"),
                    rs.getString("altitudineghiacciai"),
                    rs.getString("massaghiacciai")
                });
                noteArea.setText(noteArea.getText() + "\n-" + rs.getString("note"));
                ck = true;
            } else {
                /**
                 * Generazione finestra di errore con specifica dell'errore (Parametri climatici assenti)
                 */
                JOptionPane.showMessageDialog(null, "Non sono disponibili parametri climatici per la seguente città!","Avvertenza!!", JOptionPane.WARNING_MESSAGE);
                ck=false;
                dispose();
            }
        } catch (SQLException e) {
            /**
             * Cattura errore in caso di mancato funzionamento del metodo 'visualizzaParametriClimatici'
             * Scrittura su riga di comando dell'errore per debug
             */
            System.out.print(e);
        } finally {
            /**
             * Chiusura delle risorse
             */
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.out.print(e);
            }
        }
    }
    /**
     * Metodo aggiunta righe alla tabella dei risultati della ricerca
     * @param dataRow string, array di Stringhe passate dall'estrazione da file
     * Nessuna eccezione gestita
     */
    public static void addRowTable(String[] dataRow){
        model = (DefaultTableModel)paramTable.getModel();
        model.addRow(dataRow);
    }
    /**
     * Metodo per svuotare la tabella
     * Senza parametri perché recuperati dalle TextField
     * Nessuna eccezione gestita
     */
    public static void clearTable(){
        model = (DefaultTableModel)paramTable.getModel();
        model.setRowCount(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cityLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea noteArea;
    private static javax.swing.JTable paramTable;
    private javax.swing.JLabel titolo;
    // End of variables declaration//GEN-END:variables
    private static DefaultTableModel model;
}
