/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 * Richiamo origine progetto.
 */
package climatemonitoring;
/**
 * Importazione del separatore dalla classe main 'ClimateMonitor'
 */
import static climatemonitoring.ClimateMonitor.sep;
/**
 * Richiamo Librerie di Java
 */
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * @author 753546 Badrous Giorgio William
 * @author 753540 Casati Simone
 * @author 754772 Biavaschi Raffaele
 * @author 755531 Bonacina Davide
 */
public class Accesso extends javax.swing.JDialog {
     /**
      * Creo oggetto di nome 'hh' di tipo 'Home' 
      * Creo una finistra speculare alla Home, in versione 'Operatore' con privilegi e funzioni aggiuntive.
      */
     Home hh;
     
     /**
      * Costruttore <strong>base</strong> (senza parametri)
      */
     public Accesso(){}
     
     /**
      * Costruttore <strong>parametrizzato</strong> per bloccare la finestra sottostante
      * @param hh oggetto, di tipo 'Home'
      * @param ck boolean, da classe finestra home 'base'
      */
     public Accesso(Home hh, boolean ck){
        /**
         * 'Super' per puntare alla classe genitore, da cui eredito metodi e parametri
         */
        super(hh,ck);
        /**
         * 'This' per puntare al riferimento di una oggetto presente nella classe corrente
         */
        this.hh = hh;
        /**
         * 'This' per puntare al riferimento di una metodo presente nella classe corrente (setto titolo)
         */
        this.setTitle("Accedi");
        /**
         * Metodo base di Netbeans (Swing designer, parte grafica) per inizializzare il componente
         */
        initComponents();
        /**
         * Metodo per recuperare la dimensione del display, per creare una finestra coerente
         */
        Dimension dim = getToolkit().getScreenSize();
        /**
         * Metodo per posizione la finestra
         */
        this.setLocation(dim.width / 2 - this.getWidth() / 2, dim.height / 2 - this.getHeight() / 2);
        /**
         * Metodo per rendere visibile la finestra
         */
        setVisible(true);
    }
    
    /**
     * Creates new form Login
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        Accedi = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLabel1.setText("ACCEDI");

        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });
        usernameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameFieldKeyPressed(evt);
            }
        });

        Accedi.setBackground(new java.awt.Color(255, 255, 204));
        Accedi.setForeground(new java.awt.Color(102, 102, 102));
        Accedi.setText("Accedi");
        Accedi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccediActionPerformed(evt);
            }
        });
        Accedi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AccediKeyPressed(evt);
            }
        });

        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
        });

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 100, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(usernameField)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(Accedi))
                    .addComponent(passwordField))
                .addGap(114, 114, 114))
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(2, 2, 2)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(Accedi)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Non utilizzato
     */
    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
        //...
    }//GEN-LAST:event_usernameFieldActionPerformed
    /**
     * Metodo che al click del bottone esegue la ricerca username e passoword per l'accesso (richiama metodo 'Accedi')
     * verifica se mancano parte delle credenziali richieste, o entrambe 
     * nel caso manchino restituisce un pannello con l'errore
     * @param evt click del bottone
     * Gestita eccezione: IOException eccezione per mancanza file, directory errata
     */
    private void AccediActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccediActionPerformed
        /**
         * Gestione errori in caso di mancata compilazione dei parametri richiesti, da parte dell'utente
         */
        if(passwordField.getText().equals("") & usernameField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Crendenziali mancati, entrambe mancanti)
             */
            JOptionPane.showMessageDialog(null, "Credenziali mancanti!","Errore!", JOptionPane.ERROR_MESSAGE);
        } else if(passwordField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Password mancante)
             */
            JOptionPane.showMessageDialog(null, "Password mancante!","Errore!", JOptionPane.ERROR_MESSAGE);
        }else if(usernameField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Username mancante)
             */
            JOptionPane.showMessageDialog(null, "Username mancante!","Errore!", JOptionPane.ERROR_MESSAGE);
        }
        else{
            /**
             * Se non presenti errori in fase di inserimento, da parte dell'utente
             * Esecuzione funzione per l'accesso, all'interno di un 'Try' per evitare l'innalzamento di eccezioni
             */
            try {
                /**
                 * Richiamo funzione accesso
                 */
                accedi();
            } catch (IOException ex) {
                /**
                 * Cattura errore in caso di mancato funzionamento del metodo 'accedi'
                 */
                Logger.getLogger(Accesso.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_AccediActionPerformed
    /**
     * Ascoltatore con implementazione della tastiera
     */
    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){log();}
    }//GEN-LAST:event_passwordFieldKeyPressed

    private void usernameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){log();}
    }//GEN-LAST:event_usernameFieldKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){log();}
    }//GEN-LAST:event_formKeyPressed

    private void AccediKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AccediKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){log();}
    }//GEN-LAST:event_AccediKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Accesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Accesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Accesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Accesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /**
         * Creazione e visualizzazione della pagina di inserimento dati d'accesso 
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                /*Metodo per rendere visibile la finestra d'accesso*/
                new Accesso().setVisible(true);
            }
        });
    }
    private static boolean auth;
    
    /**
     * Metodo preliminare per l'accesso (richiama metodo 'Accedi')
     * verifica se mancano parte delle credenziali richieste, o entrambe 
     * nel caso manchino restituisce un pannello con l'errore
     * Senza parametri perché recuperati dalle TextField
     * Gestita eccezione: IOException eccezione per mancanza file, directory errata
     */

    public void log(){
         /**
          * Gestione errori in caso di mancata compilazione dei parametri richiesti, da parte dell'utente
          */
        if(passwordField.getText().equals("") & usernameField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Crendenziali mancati, entrambe mancanti)
             */
            JOptionPane.showMessageDialog(null, "Credenziali mancanti!","Errore!", JOptionPane.ERROR_MESSAGE);
        } else if(passwordField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Password mancante)
             */
            JOptionPane.showMessageDialog(null, "Password mancante!","Errore!", JOptionPane.ERROR_MESSAGE);
        }else if(usernameField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Username mancante)
             */
            JOptionPane.showMessageDialog(null, "Username mancante!","Errore!", JOptionPane.ERROR_MESSAGE);
        }
        else{
            /**
             * Se non presenti errori in fase di inserimento, da parte dell'utente
             * Esecuzione funzione per l'accesso, all'interno di un 'Try' per evitare l'innalzamento di eccezioni
             */
            try {
                /**
                 * Richiamo funzione accesso
                 */
                accedi();
            } catch (IOException ex) {
                /**
                 * Cattura errore in caso di mancato funzionamento del metodo 'accedi'
                 */
                Logger.getLogger(Accesso.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * Metodo per l'Accesso, forniti lo username e password 
     * verifica se all'interno del file 'OperatoriRegistrati.dati' è presente la combinazione username+password
     * se presente esegue il login rendendo visibili gli elementi una volta loggato
     * con implementazione dell'eccezioni (se presenti)
     * Senza parametri perché recuperati dalle TextField
     * @throws IOException eccezione per mancanza file, directory errata
     */
    public void accedi() throws IOException{
        /**
         * Imposto la linea e il lettore su valore 'nullo' iniziale
         */
        String line = null;
        FileReader in = null;
        try {
            /**
             * Imposto il lettore di riga con l'apposito separatore (dichiarato inizialmente)
             * Leggo dal file 'OperatororiRegistrati.dati'
             */
            in = new FileReader("data"+sep+"OperatoriRegistrati.dati");
            /**
             * Buffer per la lettura
             */
            BufferedReader br = new BufferedReader(in);
            /**
             * Scanner usato in fase di debug (inserimento da riga di comando)
             */
            Scanner sc = new Scanner(System.in);
            /**
             * Dichiarazione separatore da usare in fase di login, coincide con il separatore usato nel file 'OperatoriRegistrati.dati'
             * Nota: lo spazio: ' ' è fondamentale perchè presente nel file, ad ogni salvataggio di credenziali nuove (Registrazione/Inserimento da file diretto)
             */
            String splitBy = "; ";
            /**
             * Dichiarazione boolean 'aut' su valore 'falso'
             */
            boolean aut=false;
            /**
             * Metodo per recuperare credenziali da TextField usata nella parte grafica, e inserite dall'utente
             */
            String userid = usernameField.getText();
            String password = passwordField.getText();
            /**
             * Ciclo di lettetura del file per ricerca corrispondenza credenziali, conclusione a riga 'nulla'
             */
            while ((line = br.readLine()) !=null) {
                /**
                 * Estrazione valori 'UserID' e 'Password' dal file 'OperatoriRegistrati.dati'
                 */
                String[] operatore = line.split(splitBy);
                String FileUser = operatore[4];
                String FilePass = operatore[5];
                /**
                 * Stampa su riga di comando usata in fase di debug (commentata ora)
                 */
                /*System.out.print("User da file: "+FileUser+" User da input: "+userid+" Password da file: "+FilePass+" Password da input: "+password);*/
                /**
                 * Verifica corrispondenza dati inseriti dall'utente con dati estratti dal file 'OperatoriRegistrati.dati'
                 */
                if (userid.equals(FileUser) && password.equals(FilePass)) {
                    /**
                     * Corrispondenza valida, login effettuato.
                     * Stampa messaggio di validità,del login, su riga di comando (per debug)
                     */
                    System.out.println("Login effettuato: " +operatore[0] +" " +operatore[1]);
                    /**
                     * Boolean 'auth' su valore 'vero', login effettuato
                     */
                    auth=true;
                    /**
                     * Metodo per rendere visibile il bottone di logout (nella finestra speculare, da operatore con permessi)
                     */
                    hh.logout.setVisible(true);
                    /**
                     * Metodo per rendere non visibile il bottone di login (nella finestra speculare, da operatore con permessi)
                     */
                    hh.accedi.setVisible(false);
                    /**
                     * Metodo per rendere non visibile il bottone di registrazione (nella finestra speculare, da operatore con permessi)
                     */
                    hh.registrati.setVisible(false); 
                    /**
                     * Metodo per rendere visibile il bottone per aggiungere 'Centro di Monitoraggio' (nella finestra speculare, da operatore con permessi)
                     */
                    hh.addCentro.setVisible(true);
                    /**
                     * Metodo per rendere visibile il bottone per aggiungere 'Parametri Climatici' (nella finestra speculare, da operatore con permessi)
                     */
                    hh.addParam.setVisible(true);
                    /**
                     * Metodo per rendere visibile il bottone per aggiungere 'Aree di Interesse' (nella finestra speculare, da operatore con permessi)
                     */
                    hh.addArea.setVisible(true);
                    /**
                     * Passaggio di Nome,Cognome,Codice fiscale dell'operatore alla Finestra in una stringa per successivo riutilizzo
                     */
                    hh.nomeU=operatore[0];
                    hh.cogU=operatore[1];
                    hh.codFisc=operatore[2];
                    /**
                     * Creazione blocco di testo, con frase di 'Benvenuto' e informazioni dell'operatore (nome/cognome)
                     */
                    hh.newLabel.setText("Benvenuto " +operatore[0] +" " +operatore[1]);   
                    /**
                     * Boolean 'aut' su valore 'vero' per stabilire che l'utente è loggato (e saltare errore)
                     */
                    aut=true;
                    /**
                     * Chiusura finestra corrente a inserimento eseguito
                     */
                    this.dispose();
                }
            }
            if(!aut){
                /**
                 * Generazione finestra di errore in case di mancata login ('aut' su base 'falsa')
                 */
                JOptionPane.showMessageDialog(null, "Le credenziali sono errate!","Errore!", JOptionPane.ERROR_MESSAGE);
            }
        }   catch (IOException e) {
                /**
                 * Stampa dell'eccezione alzata (in caso di mancato funzionamento del metodo 'accedi') su riga di comando
                 */
                System.out.print(e);
            }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Accedi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
