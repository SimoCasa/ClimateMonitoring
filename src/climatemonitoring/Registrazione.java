/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 * Richiamo origine progetto.
 */
package climatemonitoring;
/**
 * Importazione del separatore dalla classe main 'ClimateMonitor'
 */
import static climatemonitoring.ClimateMonitor.sep;
/**
 * Richiamo Librerie di Java
 */
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 * @author 753546 Badrous Giorgio William
 * @author 753540 Casati Simone
 * @author 754772 Biavaschi Raffaele
 * @author 755531 Bonacina Davide
 */
public class Registrazione extends JDialog {
    /**
     * Costruttore <strong>base</strong> (senza parametri)
     */
    public Registrazione(){}
    /**
     * Costruttore <strong>parametrizzato</strong> per bloccare la finestra sottostante
     * @param reg oggetto, di tipo 'Home'
     * @param ck boolean, da classe finestra home 'base'
     */
    public Registrazione(Home reg, boolean ck) {
        /**
         * 'Super' per puntare alla classe genitore, da cui eredito metodi e parametri
         */
        super(reg,ck);
        /**
         * 'This' per puntare al riferimento di una metodo presente nella classe corrente (setto titolo)
         */
        this.setTitle("Registrati");
        /**
         * Metodo base di Netbeans (Swing designer, parte grafica) per inizializzare il componente
         */
        initComponents();
        /**
         * Metodo per recuperare la dimensione del display, per creare una finestra coerente
         */
        Dimension dim = getToolkit().getScreenSize();
        /**
         * Metodo per posizione la finestra
         */
        this.setLocation(dim.width / 2 - this.getWidth() / 2, dim.height / 2 - this.getHeight() / 2);
        /**
         * Metodo per rendere visibile la finestra
         */
        setVisible(true);
        /**
         * Metodo per bloccare la possibilit√† di ridimensionare la finestra
         */
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Registrati = new javax.swing.JButton();
        nome = new javax.swing.JTextField();
        cognome = new javax.swing.JTextField();
        codFisc = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        username = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        centriDrop = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setForeground(new java.awt.Color(255, 153, 102));
        jLabel1.setText("REGISTRAZIONE");

        jLabel2.setText("Nome");

        jLabel3.setText("Cognome");

        jLabel4.setText("Codice Fiscale");

        jLabel5.setText("Email");

        jLabel6.setForeground(new java.awt.Color(102, 255, 0));
        jLabel6.setText("Username");

        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("Password");

        jLabel8.setText("Centro Monitoraggio");

        Registrati.setBackground(new java.awt.Color(153, 255, 51));
        Registrati.setForeground(new java.awt.Color(153, 153, 153));
        Registrati.setText("Registrati");
        Registrati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistratiActionPerformed(evt);
            }
        });

        centriDrop.addItem("");
        //centriDrop.setSelectedIndex(null);
        centriDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centriDropActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(centriDrop, 0, 138, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nome)
                            .addComponent(cognome)
                            .addComponent(codFisc)
                            .addComponent(email)
                            .addComponent(username)
                            .addComponent(password, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))))
                .addGap(25, 127, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(168, Short.MAX_VALUE)
                .addComponent(Registrati)
                .addContainerGap(153, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cognome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(codFisc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(centriDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Registrati)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        //ArrayList model<String>=new ArrayList<String>();
        boolean ck=false;

        String line = null;
        FileReader in = null;
        try {
            in = new FileReader("data"+sep+"CentroMonitoraggio.dati");
            BufferedReader br = new BufferedReader(in);
            String splitBy = ";";
            while ((line = br.readLine()) !=null) {
                if(ck){
                    int count = 0;
                    String[] centro = line.split(splitBy);
                    String nomeCentro = centro[0];
                    //String idCentro = centro[4];
                    centriDrop.addItem(centro[0]);
                    //System.out.println(centro[0]);
                }ck=true;
            }
        }catch (IOException e) {
            System.out.print(e);
        }

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Metodo che al click del bottone esegue la registrazione dell'operatore (richiama metodo 'Registrazione')
     * verifica se mancano parte delle credenziali richieste
     * @param evt click del bottone
     * @throws IOException eccezzione per mancanza file, directory errata
     */
    private void RegistratiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistratiActionPerformed
        /**
         * Variabili impostate su valore iniziale
         */
        boolean check=true; ArrayList<String> errore=new ArrayList<String>();int c=0;
        /**
         * Controlla se nome uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(nome.getText().equals("")){check=false;errore.add("Nome");c++;}
        /**
         * Controlla se cognome uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(cognome.getText().equals("")){check=false;errore.add("Cognome");c++;}
        /**
         * Controlla se email uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(email.getText().equals("")){check=false;errore.add("Email");c++;}
        /**
         * Controlla se username uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(username.getText().equals("")){check=false;errore.add("Username");c++;}
        /**
         * Controlla se codiceFisc uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(codFisc.getText().equals("")){check=false;errore.add("Codice Fiscale");c++;}
        /**
         * Controlla se password uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(password.getText().equals("")){check=false;errore.add("Password");c++;}
        /**
         * Controlla se centriDrop uguale a ' ' (vuoto), se vuoto check su valore 'falso'
         */
        if(centriDrop.getSelectedItem().equals("")){check=false;errore.add("Centro Monitoraggio");c++;}
        /**
         * Controlla se check diverso da vero, se uguale a vero prosegue 
         * mostrando l'errore se falso invece prosegue con la registrazione
         */
        if(!check){
            /**
             * Variabili stringa f, vuota
             */
            String f = "";
            for(String s : errore){ f+="\n-"+s ;}
            /**
             * Generazione finestra di errore con specifica dell'errore (parametro mancante)
             */
            JOptionPane.showMessageDialog(null, "Non hai inserito: " +f,"Errore!", JOptionPane.ERROR_MESSAGE);
        }else{
            /**
             * Esegue il metodo di registrazione, controllato per evitare innalzamento di eccezioni
             */
            try {
                /**
                 * Richiamo funzione registrazione
                 */
                registrazione();
                /**
                 * Chiusura finestra corrente a inserimento eseguito
                 */
                this.dispose();
            } catch (IOException ex) {
                /**
                 * Cattura errore in caso di mancato funzionamento del metodo 'registrazione'
                 */
                Logger.getLogger(Registrazione.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_RegistratiActionPerformed
    /**
     * Metodo non utilizzato
     */
    private void centriDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centriDropActionPerformed
        // ...
    }//GEN-LAST:event_centriDropActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registrazione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registrazione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registrazione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registrazione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /**
         * Creazione e visualizzazione del form di inserimento (per registrazione) 
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                /**
                 * Metodo per rendere visibile il form d'inserimento
                 */
                new Registrazione().setVisible(true);
            }
        });
    }
    /**
     * Metodo per la Registrazione, forniti i parametri dall'utente
     * inserisce all'interno del file 'OperatoriRegistrati.dati' 
     * con implementazione dell'eccezioni (se presenti)
     * Senza parametri perch√© recuperati dalle TextField
     * @throws IOException eccezione per mancanza file, directory errata
    */
    public void registrazione() throws IOException{
        /**
         * Variabili separatore di tipo String 
         */
        String sip="; ",sip2=";";
        /**
         * Imposto lo scrittore di riga con l'apposito separatore (dichiarato inizialmente)
         * Scrivo sul file 'OperatororiRegistrati.dati'
         */
        FileWriter fw = new FileWriter("data"+sep+"OperatoriRegistrati.dati",true);
        /**
         * Scrivo ad uno ad uno i parametri inseriti nel form dall'utente, nel file 'OperatoriRegistrati.dati'
         */
        fw.write("\n");
        fw.append(nome.getText()+sip);
        fw.append(cognome.getText()+sip);
        fw.append(codFisc.getText()+sip);
        fw.append(email.getText()+sip);
        fw.append(username.getText()+sip);
        fw.append(password.getText()+sip2);
        /**
         * Inserimento usato in fase di debug, poi rimoss
         */
        //fw.append((String)centriDrop.getSelectedItem());
        /**
         * Reset parametri
         */
        String nome = (String)centriDrop.getSelectedItem();
        String line = null;
        FileReader in = null;
        String IDCentro = null;
        /**
         * Stampa su riga di comando usato in fase di debug, poi rimosso
         */
        //System.out.println("Siamo Arrivati -1");
        /**
         * Lettura da file 'CentroMonitoraggio.dati' per cercare corrispodenza con i Centri disponibili
         * per permettergli di scegliere poi da menu di selezione il Centro di competenza
         */
        try {
            /*Stampa su riga di comando usato in fase di debug, poi rimosso*/
            //System.out.println("Siamo Arrivati 0");
            /**
             * Imposto il lettore di riga con l'apposito separatore (dichiarato inizialmente)
             * Leggo dal file 'CentroMonitoraggio.dati'
             */
            in = new FileReader("data"+sep+"CentroMonitoraggio.dati");
            /**
             * Buffer per la lettura
             */
            BufferedReader br = new BufferedReader(in);
            /**
             * Dichiarazione separatore da usare in fase di login, coincide con il separatore usato nel file 'CentroMonitoraggio.dati'
             */
            String splitBy = ";";
            /**
             * Ciclo di lettetura del file per estrarre 'Centri di Monitoraggio'
             */
            while ((line = br.readLine()) !=null) {
                /**
                 * Estrazione valore 'FileNome' dal file 'CentroMonitoraggio.dati'
                 */
                String[] centri = line.split(splitBy);
                String FileNome = centri[0];
                /**
                 * Stampa su riga di comando usato in fase di debug, poi rimosso
                 */
                //System.out.println("Siamo Arrivati 1: "+nome+" "+FileNome);
                /**
                 * Verifica corrispodenza tra selezione e valore estratto da file
                 */
                if(nome.equals(FileNome)){
                    /**
                     * Stampa su riga di comando usato in fase di debug, poi rimosso
                     */
                    //System.out.println("Siamo Arrivati 2 "+centri[3]);
                     /**
                      * Assegnazione IDCentro da valore di file
                      */
                    IDCentro = centri[3];
                    
                    break;
                }
            }            
        }catch(Exception e){
             /**
              * Stampa dell'eccezione generica
              */
            System.out.println(e);
        }
        fw.append((String)IDCentro);
        
        /**
         * Reset parametri/finestra
         */
        fw.flush();
        fw.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Registrati;
    private javax.swing.JComboBox<String> centriDrop;
    private javax.swing.JTextField codFisc;
    private javax.swing.JTextField cognome;
    private javax.swing.JTextField email;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField nome;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
